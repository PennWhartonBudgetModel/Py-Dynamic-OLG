%%
% Find steady state inverses for target elasticities using the inverse interpolant generated by generate_ss_inverter.m.
% 
%%


function [inverses, targets] = invert_ss_targets()

addpath('..')


% Identify parameter directory
param_dir = dirFinder.param;


% Load inverse interpolant
s = load('invert_ss.mat');
invert_ss  = s.invert_ss;
clear('s')


% Specify elasticity target values and generate all target combinations
K_target  = 3;
L_targets = [0.25, 0.50, 0.75, 1.00];
S_targets = [0.25, 0.50, 0.75, 1.00];

[K_, L_, S_] = ndgrid(K_target, L_targets, S_targets);
targets = [K_(:), L_(:), S_(:)];
ntargets = size(targets, 1);


% Find inverses
inverses = invert_ss(targets);


% Find true solutions corresponding to interpolated inverses
truths = zeros(size(targets));
parfor i = 1:ntargets
    [~, truths(i,:)] = solve_ss(inverses(i,:), false);
end


% Specify error norm dimensionality
normd = 2;

% Construct error normalizing vector
normalizer = [K_target, max(abs(L_targets)), max(abs(S_targets))];

% Compute errors between true solutions and targets
errors = abs(truths - targets) ./ repmat(normalizer, [ntargets, 1]);
errors = [errors, sum( errors.^normd, 2 ).^(1/normd)]; %#ok<NASGU>


% Save values
save(fullfile(param_dir, 'ss_inverses.mat'), ...
     'inverses', 'targets', 'truths', 'errors')


end